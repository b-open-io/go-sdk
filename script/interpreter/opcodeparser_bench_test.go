package interpreter

import (
	"testing"

	"github.com/bsv-blockchain/go-sdk/script"
)

// BenchmarkOpParseSmall benchmarks parsing a small P2PKH script (25 bytes)
func BenchmarkOpParseSmall(b *testing.B) {
	s, _ := script.NewFromHex("76a914abcd1234abcd1234abcd1234abcd1234abcd123488ac")
	p := DefaultOpcodeParser{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_, _ = p.Parse(s)
	}
}

// BenchmarkOpParseLargeData benchmarks parsing a large data carrier script (100KB)
func BenchmarkOpParseLargeData(b *testing.B) {
	s := &script.Script{}
	*s = append(*s, script.Op0)
	*s = append(*s, script.OpRETURN)
	*s = append(*s, script.OpPUSHDATA4)
	*s = append(*s, 0x00, 0x86, 0x01, 0x00) // 100,000 bytes
	*s = append(*s, make([]byte, 100000)...)

	p := DefaultOpcodeParser{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_, _ = p.Parse(s)
	}
}

// BenchmarkOpParseSuperLargeData benchmarks parsing a very large data carrier script (5MB)
func BenchmarkOpParseSuperLargeData(b *testing.B) {
	s := &script.Script{}
	*s = append(*s, script.Op0)
	*s = append(*s, script.OpRETURN)
	*s = append(*s, script.OpPUSHDATA4)
	*s = append(*s, 0x40, 0x4B, 0x4C, 0x00) // 5,000,000 bytes
	*s = append(*s, make([]byte, 5000000)...)

	p := DefaultOpcodeParser{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_, _ = p.Parse(s)
	}
}

// BenchmarkOpParseManyPushDatas benchmarks parsing a script with many push data operations
func BenchmarkOpParseManyPushDatas(b *testing.B) {
	s := &script.Script{}
	// Create a script with 1000 push operations
	for i := 0; i < 1000; i++ {
		*s = append(*s, script.OpPUSHDATA1)
		*s = append(*s, 100) // 100 bytes each
		*s = append(*s, make([]byte, 100)...)
	}

	p := DefaultOpcodeParser{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_, _ = p.Parse(s)
	}
}

// BenchmarkOpParseSTAS benchmarks parsing a complex STAS script
func BenchmarkOpParseSTAS(b *testing.B) {
	// This is a real STAS script with ~1200 opcodes in 1751 bytes
	s, _ := script.NewFromHex("76a91445a17a99c1a84937c96ccbb03c1b73f0fb7a093588ac6976aa607f5f7f7c5e7f7c5d7f7c5c7f7c5b7f7c5a7f7c597f7c587f7c577f7c567f7c557f7c547f7c537f7c527f7c517f7c7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7c5f7f7c5e7f7c5d7f7c5c7f7c5b7f7c5a7f7c597f7c587f7c577f7c567f7c557f7c547f7c537f7c527f7c517f7c7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e01007e818b21414136d08c5ed2bf3ba048afe6dcaebafeffffffffffffffffffffffffffffff007d976e7c5296a06394677768827601249301307c7e23022079be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798027e7c7e7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e01417e21038ff83d8cf12121491609c4939dc11c4aa35503508fe432dc5a5c1905608b9218ad547f7701207f01207f7701247f517f7801007e8102fd00a063546752687f7801007e817f727e7b01177f777b557a766471567a577a786354807e7e676d68aa880067765158a569765187645294567a5379587a7e7e78637c8c7c53797e577a7e6878637c8c7c53797e577a7e6878637c8c7c53797e577a7e6878637c8c7c53797e577a7e6878637c8c7c53797e577a7e6867567a6876aa587a7d54807e577a597a5a7a786354807e6f7e7eaa727c7e676d6e7eaa7c687b7eaa587a7d877663516752687c72879b69537a647500687c7b547f77517f7853a0916901247f77517f7c01007e817602fc00a06302fd00a063546752687f7c01007e816854937f77788c6301247f77517f7c01007e817602fc00a06302fd00a063546752687f7c01007e816854937f777852946301247f77517f7c01007e817602fc00a06302fd00a063546752687f7c01007e816854937f77686877517f7c52797d8b9f7c53a09b91697c76638c7c587f77517f7c01007e817602fc00a06302fd00a063546752687f7c01007e81687f777c6876638c7c587f77517f7c01007e817602fc00a06302fd00a063546752687f7c01007e81687f777c6863587f77517f7c01007e817602fc00a06302fd00a063546752687f7c01007e81687f7768587f517f7801007e817602fc00a06302fd00a063546752687f7801007e81727e7b7b687f75537f7c0376a9148801147f775379645579887567726881766968789263556753687a76026c057f7701147f8263517f7c766301007e817f7c6775006877686b537992635379528763547a6b547a6b677c6b567a6b537a7c717c71716868547a587f7c81547a557964936755795187637c686b687c547f7701207f75748c7a7669765880748c7a76567a876457790376a9147e7c7e557967041976a9147c7e0288ac687e7e5579636c766976748c7a9d58807e6c0376a9147e748c7a7e6c7e7e676c766b8263828c007c80517e846864745aa0637c748c7a76697d937b7b58807e56790376a9147e748c7a7e55797e7e6868686c567a5187637500678263828c007c80517e846868647459a0637c748c7a76697d937b7b58807e55790376a9147e748c7a7e55797e7e687459a0637c748c7a76697d937b7b58807e55790376a9147e748c7a7e55797e7e68687c537a9d547963557958807e041976a91455797e0288ac7e7e68aa87726d77776a1457e2bac94b4673b865f650292d86f0a521d5f070010006424c554541524d34017c20565354207c2065386230313538643461643738323734663838636363376663386561633064356234386131663937373565656436333839333934376433643661306232333965207c2068747470733a2f2f666972656261736573746f726167652e676f6f676c65617069732e636f6d2f76302f622f706f69696e747a2e61707073706f742e636f6d2f6f2f626c756561726d79253246696d6167655f63726f707065725f44303045423742302d424546372d343442412d394543392d3934303132314245443146442d313035322d303030303030354139424631454543452e6a70673f616c743d6d6564696126746f6b656e3d66323064646162362d633961322d346361612d613932332d316536316134353031393135207c202d31207c2031207c20426c75652061726d79207c2030207c")

	p := DefaultOpcodeParser{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_, _ = p.Parse(s)
	}
}
